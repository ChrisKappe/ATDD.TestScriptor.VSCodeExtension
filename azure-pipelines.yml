######
# ATDD.TestScriptor Build pipeline - Windows x64
######

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  targetPlatformWin: 'win-x64'
  targetPlatformLinux: 'linux-x64'
  RunVersion: "0.1.$(Build.BuildId)"

# .NET Server

steps:
- checkout: self
  submodules: recursive

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: '.NET Server restore'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    #feedsToUse: 'config'
    #nugetConfigPath: './Nuget.config'

- task: VSBuild@1
  displayName: '.NET Server VS build'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: '.NET Server tests'
  inputs:      
    command: 'test'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: '.NET Server Windows build'
  inputs:
    workingDirectory: 'services/ATDD.TestScriptor.BackendServices'
    command: 'publish'
    publishWebProjects: false    
    zipAfterPublish: false
    arguments: '--configuration $(BuildConfiguration) --output ../../vscode-extension/bin/windows --self-contained -r $(targetPlatformWin) /p:PublishSingleFile=true /p:PublishTrimmed=true'

- task: DotNetCoreCLI@2
  displayName: '.NET Server Linux build'
  inputs:
    workingDirectory: 'services/ATDD.TestScriptor.BackendServices'
    command: 'publish'
    publishWebProjects: false    
    zipAfterPublish: false
    arguments: '--configuration $(BuildConfiguration) --output ../../vscode-extension/bin/linux --self-contained -r $(targetPlatformLinux) /p:PublishSingleFile=true /p:PublishTrimmed=true'
  

# Aurelia App

- script: yarn global add aurelia-cli
  displayName: 'Aurelia-CLI install'
  workingDirectory: 'web-ui'

- script: yarn install
  displayName: 'Aurelia App restore'
  workingDirectory: 'web-ui'

- script: yarn build
  displayName: 'Aurelia App build'
  workingDirectory: 'web-ui'

# VSCode extension

- script: yarn global add vsce
  displayName: 'VSCE install'
  workingDirectory: 'vscode-extension'

- script: yarn install
  displayName: 'VS Ext. restore'
  workingDirectory: 'vscode-extension'
  
- task: PowerShell@2
  displayName: 'VS Ext. Update package.json'
  inputs:
    targetType: 'inline'
    script: '((Get-Content -path ./package.json -Raw) -replace ''"debugMode": true'',''"debugMode": false'') | Set-Content -Path ./package.json'
    workingDirectory: 'vscode-extension'

- script: yarn version --no-git-tag-version --new-version $(RunVersion)
  displayName: 'VS Ext. set version'
  workingDirectory: 'vscode-extension'

- script: yarn package
  displayName: 'VS Ext. package'
  workingDirectory: 'vscode-extension'

# Finalize

- task: CopyFiles@2
  displayName: 'VS Ext. publish'
  inputs:
    SourceFolder: 'vscode-extension'
    Contents: '*.vsix'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Final publish'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'ATDD.TestScriptor'
